(self.webpackChunkshake_lang_github_io=self.webpackChunkshake_lang_github_io||[]).push([[446],{446:function(e){"use strict";e.exports=JSON.parse('{"pages":["docs/operators.html","index.html","test.html"],"ids":["shake-programming-language-features","1-operators","1-0-mathematical-operators","site-contents","1-1-comparison-operators","1-2-logical-operators","1-3-brackets-priorities","1-3-0-brackets","1-3-1-priorities",null,"try-shake","headline-1","headline-2","headline-3","headline-4","headline-5","headline-6"],"contents":[{"page":1,"findAt":1,"contents":"Shake Programming Language Features"},{"page":0,"findAt":2,"contents":"1 Operators"},{"page":0,"findAt":3,"contents":"1.0 Mathematical Operators"},{"page":0,"findAt":4,"contents":"Shake has 6 different types of simple mathematical operators"},{"page":0,"findAt":3,"contents":"10 + 3   // plus\\n10 – 3   // minus\\n10 * 3   // multiply\\n10 / 3   // divide\\n10 % 3   // modulo\\n10 ** 3  // power (>> 10 * 10 * 10)\\n"},{"page":0,"findAt":5,"contents":"1.1 Comparison Operators"},{"page":0,"findAt":3,"contents":"These are Shake\'s comparison-operators"},{"page":0,"findAt":3,"contents":"9 == 8  // equals\\n9 >= 8  // bigger Equals\\n9 <= 8  // lower Equals\\n9 > 8   // bigger\\n9 < 8   // lower\\n"},{"page":0,"findAt":6,"contents":"1.2 Logical Operators"},{"page":0,"findAt":3,"contents":"true || false  // or (at least one of them has to be correct) \\ntrue && false  // and (both of them have to be correct)\\ntrue ^ false   // xor (either one, but not both have to becorrect)\\n"},{"page":0,"findAt":7,"contents":"1.3 Brackets & Priorities"},{"page":0,"findAt":8,"contents":"1.3.0 Brackets"},{"page":0,"findAt":3,"contents":"If you are working with bigger terms, there are priorities, e.g.\\nmultiplication and divisions are preferred before plus and minus."},{"page":0,"findAt":3,"contents":"If you want to prefer plus over multiply you can use brackets around\\nthe addition to give it a higher priority"},{"page":0,"findAt":3,"contents":"eg."},{"page":0,"findAt":3,"contents":"4 * 10 + 3    // >> 43\\n4 * (10 + 3)  // >> 52\\n"},{"page":0,"findAt":9,"contents":"1.3.1 Priorities"},{"page":0,"findAt":3,"contents":"implemented priorities"},{"page":0,"findAt":3,"contents":"brackets (, )"},{"page":0,"findAt":3,"contents":"logical operators > and &&"},{"page":0,"findAt":3,"contents":"logical operators > or ||"},{"page":0,"findAt":3,"contents":"comparison"},{"page":0,"findAt":3,"contents":">"},{"page":0,"findAt":3,"contents":"<"},{"page":0,"findAt":3,"contents":">="},{"page":0,"findAt":3,"contents":"<="},{"page":0,"findAt":3,"contents":"=="},{"page":0,"findAt":3,"contents":"mathematical > power **"},{"page":0,"findAt":3,"contents":"mathematical > mul, div, mod * / %"},{"page":0,"findAt":3,"contents":"mathematical > add, sub + -"},{"page":2,"findAt":10,"contents":"Home"},{"page":1,"findAt":9,"contents":"Learn"},{"page":1,"findAt":9,"contents":"Docs"},{"page":1,"findAt":9,"contents":"\\n          Playground\\n        "},{"page":1,"findAt":3,"contents":"A modern object-orientated programming language "},{"page":1,"findAt":3,"contents":"Try Shake"},{"page":1,"findAt":11,"contents":"println(\\"hello world\\");"},{"page":3,"findAt":12,"contents":"Headline 1"},{"page":2,"findAt":13,"contents":"Headline 2"},{"page":2,"findAt":14,"contents":"Headline 3"},{"page":2,"findAt":15,"contents":"Headline 4"},{"page":2,"findAt":16,"contents":"Headline 5"},{"page":2,"findAt":17,"contents":"Headline 6"},{"page":2,"findAt":3,"contents":"var i = 0\\n"}],"fuseIndex":{"keys":[{"path":["contents"],"id":"contents","weight":1,"src":"contents"}],"records":[{"i":0,"$":{"0":{"v":"Shake Programming Language Features","n":0.5}}},{"i":1,"$":{"0":{"v":"1 Operators","n":0.707}}},{"i":2,"$":{"0":{"v":"1.0 Mathematical Operators","n":0.577}}},{"i":3,"$":{"0":{"v":"Shake has 6 different types of simple mathematical operators","n":0.333}}},{"i":4,"$":{"0":{"v":"10 + 3   // plus\\n10 – 3   // minus\\n10 * 3   // multiply\\n10 / 3   // divide\\n10 % 3   // modulo\\n10 ** 3  // power (>> 10 * 10 * 10)\\n","n":0.18}}},{"i":5,"$":{"0":{"v":"1.1 Comparison Operators","n":0.577}}},{"i":6,"$":{"0":{"v":"These are Shake\'s comparison-operators","n":0.5}}},{"i":7,"$":{"0":{"v":"9 == 8  // equals\\n9 >= 8  // bigger Equals\\n9 <= 8  // lower Equals\\n9 > 8   // bigger\\n9 < 8   // lower\\n","n":0.209}}},{"i":8,"$":{"0":{"v":"1.2 Logical Operators","n":0.577}}},{"i":9,"$":{"0":{"v":"true || false  // or (at least one of them has to be correct) \\ntrue && false  // and (both of them have to be correct)\\ntrue ^ false   // xor (either one, but not both have to becorrect)\\n","n":0.162}}},{"i":10,"$":{"0":{"v":"1.3 Brackets & Priorities","n":0.5}}},{"i":11,"$":{"0":{"v":"1.3.0 Brackets","n":0.707}}},{"i":12,"$":{"0":{"v":"If you are working with bigger terms, there are priorities, e.g.\\nmultiplication and divisions are preferred before plus and minus.","n":0.229}}},{"i":13,"$":{"0":{"v":"If you want to prefer plus over multiply you can use brackets around\\nthe addition to give it a higher priority","n":0.224}}},{"i":14,"$":{"0":{"v":"eg.","n":1}}},{"i":15,"$":{"0":{"v":"4 * 10 + 3    // >> 43\\n4 * (10 + 3)  // >> 52\\n","n":0.258}}},{"i":16,"$":{"0":{"v":"1.3.1 Priorities","n":0.707}}},{"i":17,"$":{"0":{"v":"implemented priorities","n":0.707}}},{"i":18,"$":{"0":{"v":"brackets (, )","n":0.577}}},{"i":19,"$":{"0":{"v":"logical operators > and &&","n":0.447}}},{"i":20,"$":{"0":{"v":"logical operators > or ||","n":0.447}}},{"i":21,"$":{"0":{"v":"comparison","n":1}}},{"i":22,"$":{"0":{"v":">","n":1}}},{"i":23,"$":{"0":{"v":"<","n":1}}},{"i":24,"$":{"0":{"v":">=","n":1}}},{"i":25,"$":{"0":{"v":"<=","n":1}}},{"i":26,"$":{"0":{"v":"==","n":1}}},{"i":27,"$":{"0":{"v":"mathematical > power **","n":0.5}}},{"i":28,"$":{"0":{"v":"mathematical > mul, div, mod * / %","n":0.354}}},{"i":29,"$":{"0":{"v":"mathematical > add, sub + -","n":0.408}}},{"i":30,"$":{"0":{"v":"Home","n":1}}},{"i":31,"$":{"0":{"v":"Learn","n":1}}},{"i":32,"$":{"0":{"v":"Docs","n":1}}},{"i":33,"$":{"0":{"v":"\\n          Playground\\n        ","n":0.707}}},{"i":34,"$":{"0":{"v":"A modern object-orientated programming language ","n":0.447}}},{"i":35,"$":{"0":{"v":"Try Shake","n":0.707}}},{"i":36,"$":{"0":{"v":"println(\\"hello world\\");","n":0.707}}},{"i":37,"$":{"0":{"v":"Headline 1","n":0.707}}},{"i":38,"$":{"0":{"v":"Headline 2","n":0.707}}},{"i":39,"$":{"0":{"v":"Headline 3","n":0.707}}},{"i":40,"$":{"0":{"v":"Headline 4","n":0.707}}},{"i":41,"$":{"0":{"v":"Headline 5","n":0.707}}},{"i":42,"$":{"0":{"v":"Headline 6","n":0.707}}},{"i":43,"$":{"0":{"v":"var i = 0\\n","n":0.5}}}]}}')}}]);
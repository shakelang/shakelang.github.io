(self.webpackChunkshake_lang_github_io=self.webpackChunkshake_lang_github_io||[]).push([[446],{446:function(n){"use strict";n.exports=JSON.parse('{"pages":["docs/operators.html","index.html","test.html"],"ids":["shake-programming-language-features","1-operators","1-0-mathematical-operators","site-contents","1-1-comparison-operators","1-2-logical-operators","1-3-bitwise-operators","1-3-0-understanding-binary-numbers","1-3-1-bitwise-and-or-xor","1-3-2-bitwise-shift","1-4-brackets-priorities","1-4-0-brackets","1-4-1-priorities",null,"try-shake","headline-1","headline-2","headline-3","headline-4","headline-5","headline-6"],"contents":[{"page":1,"findAt":1,"contents":"Shake Programming Language Features"},{"page":0,"findAt":2,"contents":"1 Operators"},{"page":0,"findAt":3,"contents":"1.0 Mathematical Operators"},{"page":0,"findAt":4,"contents":"Shake has 6 different types of simple mathematical operators"},{"page":0,"findAt":3,"contents":"10 + 3   // plus\\n10 – 3   // minus\\n10 * 3   // multiply\\n10 / 3   // divide\\n10 % 3   // modulo\\n10 ** 3  // power (>> 10 * 10 * 10)\\n"},{"page":0,"findAt":5,"contents":"1.1 Comparison Operators"},{"page":0,"findAt":3,"contents":"These are Shake\'s comparison-operators"},{"page":0,"findAt":3,"contents":"9 == 8  // equals\\n9 >= 8  // bigger Equals\\n9 <= 8  // lower Equals\\n9 > 8   // bigger\\n9 < 8   // lower\\n"},{"page":0,"findAt":6,"contents":"1.2 Logical Operators"},{"page":0,"findAt":3,"contents":"true || false  // or (at least one of them has to be correct) \\ntrue && false  // and (both of them have to be correct)\\ntrue ^ false   // xor (either one, but not both have to be correct)\\n"},{"page":0,"findAt":7,"contents":"1.3 Bitwise operators"},{"page":0,"findAt":8,"contents":"1.3.0 Understanding binary numbers"},{"page":0,"findAt":3,"contents":"Binary operators can manipulate the bits of values.\\nTo understand binary operations you first have to understand binary numbers.\\nIn binary numbers, each digit is either 0 or 1. You can just write each number to the base 2\\nlike you would in decimal. We would count like this:"},{"page":0,"findAt":3,"contents":"0 (0), 1 (1), 10 (2), 11 (3), 100 (4), 101 (5), 110 (6), 111 (7)... (and so on)\\n"},{"page":0,"findAt":3,"contents":"for a negative number you can use the same principle, but start with a minus sign."},{"page":0,"findAt":3,"contents":"to convert a binary number to decimal you can use the following formula:"},{"page":0,"findAt":3,"contents":"decimal = binary * 2^0 + binary * 2^1 + ... + binary * 2^n\\n"},{"page":0,"findAt":3,"contents":"and to convert a decimal number to binary you can use the following formula:"},{"page":0,"findAt":3,"contents":"binary = decimal / 2^0 + decimal / 2^1 + ... + decimal / 2^n\\n"},{"page":0,"findAt":3,"contents":"This is how most primitive datatypes work. They just have a differing number of bits."},{"page":0,"findAt":3,"contents":"Datatype"},{"page":0,"findAt":3,"contents":"Amount of bits"},{"page":0,"findAt":3,"contents":"Byte"},{"page":0,"findAt":3,"contents":"8"},{"page":0,"findAt":3,"contents":"Short"},{"page":0,"findAt":3,"contents":"16"},{"page":0,"findAt":3,"contents":"Integer"},{"page":0,"findAt":3,"contents":"32"},{"page":0,"findAt":3,"contents":"Long"},{"page":0,"findAt":3,"contents":"64"},{"page":0,"findAt":3,"contents":"These data types also have to be able to store negative values. So the first digit is used to store the sign.\\nSo for negative numbers the first digit is 1 and the rest of the digits are 0.\\nThe formula to convert a binary number to decimal is the same as positive numbers, but we calculate (-1) + [positive amount] because we don\'t need a negative zero."},{"page":0,"findAt":3,"contents":"Following this concept we have these ranges:"},{"page":0,"findAt":3,"contents":"Datatype"},{"page":0,"findAt":3,"contents":"Amount of bits"},{"page":0,"findAt":3,"contents":"Range"},{"page":0,"findAt":3,"contents":"Byte"},{"page":0,"findAt":3,"contents":"8"},{"page":0,"findAt":3,"contents":"-128 to 127"},{"page":0,"findAt":3,"contents":"Short"},{"page":0,"findAt":3,"contents":"16"},{"page":0,"findAt":3,"contents":"-2^15 to 2^15-1"},{"page":0,"findAt":3,"contents":"Integer"},{"page":0,"findAt":3,"contents":"32"},{"page":0,"findAt":3,"contents":"-2^31 to 2^31-1"},{"page":0,"findAt":3,"contents":"Long"},{"page":0,"findAt":3,"contents":"64"},{"page":0,"findAt":3,"contents":"-2^63 to 2^63-1"},{"page":0,"findAt":3,"contents":"Now that we know how to convert numbers to binary and back we can start to understand the different operators."},{"page":0,"findAt":9,"contents":"1.3.1 Bitwise and, or, xor"},{"page":0,"findAt":3,"contents":"0b1010 & 0b0101  // 0b0000 Binary AND\\n0b1010 | 0b0101  // 0b1101 Binary OR\\n0b1010 ^ 0b0101  // 0b1011 Binary XOR\\n"},{"page":0,"findAt":3,"contents":"If we just think about the bits as boolean values, we can use the AND, OR and XOR operators to manipulate the bits.\\nso bit 1 from the first number is ANDed with bit 1 from the second number, bit 2 from the first number is ANDed with bit 2 from the second number and so on."},{"page":0,"findAt":10,"contents":"1.3.2 Bitwise shift"},{"page":0,"findAt":3,"contents":"0b1010 << 1  // 0b1010 Binary left shift\\n0b1010 >> 1  // 0b0101 Binary right shift\\n"},{"page":0,"findAt":3,"contents":"Using lshift and rshift we can shift the bits of a number to the left or right by a certain amount."},{"page":0,"findAt":11,"contents":"1.4 Brackets & Priorities"},{"page":0,"findAt":12,"contents":"1.4.0 Brackets"},{"page":0,"findAt":3,"contents":"If you are working with bigger terms, there are priorities, e.g.\\nmultiplication and divisions are preferred before plus and minus."},{"page":0,"findAt":3,"contents":"If you want to prefer plus over multiply you can use brackets around\\nthe addition to give it a higher priority"},{"page":0,"findAt":3,"contents":"eg."},{"page":0,"findAt":3,"contents":"4 * 10 + 3    // >> 43\\n4 * (10 + 3)  // >> 52\\n"},{"page":0,"findAt":13,"contents":"1.4.1 Priorities"},{"page":0,"findAt":3,"contents":"brackets (, )"},{"page":0,"findAt":3,"contents":"bitwise and, or, xor &, |, ^"},{"page":0,"findAt":3,"contents":"bitwise shift <<, >>"},{"page":0,"findAt":3,"contents":"mathematical > power **"},{"page":0,"findAt":3,"contents":"mathematical > mul, div, mod * / %"},{"page":0,"findAt":3,"contents":"mathematical > add, sub + -"},{"page":0,"findAt":3,"contents":"logical operators > and &&"},{"page":0,"findAt":3,"contents":"logical operators > or ||"},{"page":0,"findAt":3,"contents":"comparison"},{"page":0,"findAt":3,"contents":">"},{"page":0,"findAt":3,"contents":"<"},{"page":0,"findAt":3,"contents":">="},{"page":0,"findAt":3,"contents":"<="},{"page":0,"findAt":3,"contents":"=="},{"page":2,"findAt":14,"contents":"Home"},{"page":1,"findAt":13,"contents":"Learn"},{"page":1,"findAt":13,"contents":"Docs"},{"page":1,"findAt":13,"contents":"\\n          Playground\\n        "},{"page":1,"findAt":3,"contents":"A modern object-orientated programming language "},{"page":1,"findAt":3,"contents":"Try Shake"},{"page":1,"findAt":15,"contents":"println(\\"hello world\\");"},{"page":3,"findAt":16,"contents":"Headline 1"},{"page":2,"findAt":17,"contents":"Headline 2"},{"page":2,"findAt":18,"contents":"Headline 3"},{"page":2,"findAt":19,"contents":"Headline 4"},{"page":2,"findAt":20,"contents":"Headline 5"},{"page":2,"findAt":21,"contents":"Headline 6"},{"page":2,"findAt":3,"contents":"var i = 0\\n"}],"fuseIndex":{"keys":[{"path":["contents"],"id":"contents","weight":1,"src":"contents"}],"records":[{"i":0,"$":{"0":{"v":"Shake Programming Language Features","n":0.5}}},{"i":1,"$":{"0":{"v":"1 Operators","n":0.707}}},{"i":2,"$":{"0":{"v":"1.0 Mathematical Operators","n":0.577}}},{"i":3,"$":{"0":{"v":"Shake has 6 different types of simple mathematical operators","n":0.333}}},{"i":4,"$":{"0":{"v":"10 + 3   // plus\\n10 – 3   // minus\\n10 * 3   // multiply\\n10 / 3   // divide\\n10 % 3   // modulo\\n10 ** 3  // power (>> 10 * 10 * 10)\\n","n":0.18}}},{"i":5,"$":{"0":{"v":"1.1 Comparison Operators","n":0.577}}},{"i":6,"$":{"0":{"v":"These are Shake\'s comparison-operators","n":0.5}}},{"i":7,"$":{"0":{"v":"9 == 8  // equals\\n9 >= 8  // bigger Equals\\n9 <= 8  // lower Equals\\n9 > 8   // bigger\\n9 < 8   // lower\\n","n":0.209}}},{"i":8,"$":{"0":{"v":"1.2 Logical Operators","n":0.577}}},{"i":9,"$":{"0":{"v":"true || false  // or (at least one of them has to be correct) \\ntrue && false  // and (both of them have to be correct)\\ntrue ^ false   // xor (either one, but not both have to be correct)\\n","n":0.16}}},{"i":10,"$":{"0":{"v":"1.3 Bitwise operators","n":0.577}}},{"i":11,"$":{"0":{"v":"1.3.0 Understanding binary numbers","n":0.5}}},{"i":12,"$":{"0":{"v":"Binary operators can manipulate the bits of values.\\nTo understand binary operations you first have to understand binary numbers.\\nIn binary numbers, each digit is either 0 or 1. You can just write each number to the base 2\\nlike you would in decimal. We would count like this:","n":0.147}}},{"i":13,"$":{"0":{"v":"0 (0), 1 (1), 10 (2), 11 (3), 100 (4), 101 (5), 110 (6), 111 (7)... (and so on)\\n","n":0.229}}},{"i":14,"$":{"0":{"v":"for a negative number you can use the same principle, but start with a minus sign.","n":0.25}}},{"i":15,"$":{"0":{"v":"to convert a binary number to decimal you can use the following formula:","n":0.277}}},{"i":16,"$":{"0":{"v":"decimal = binary * 2^0 + binary * 2^1 + ... + binary * 2^n\\n","n":0.258}}},{"i":17,"$":{"0":{"v":"and to convert a decimal number to binary you can use the following formula:","n":0.267}}},{"i":18,"$":{"0":{"v":"binary = decimal / 2^0 + decimal / 2^1 + ... + decimal / 2^n\\n","n":0.258}}},{"i":19,"$":{"0":{"v":"This is how most primitive datatypes work. They just have a differing number of bits.","n":0.258}}},{"i":20,"$":{"0":{"v":"Datatype","n":1}}},{"i":21,"$":{"0":{"v":"Amount of bits","n":0.577}}},{"i":22,"$":{"0":{"v":"Byte","n":1}}},{"i":23,"$":{"0":{"v":"8","n":1}}},{"i":24,"$":{"0":{"v":"Short","n":1}}},{"i":25,"$":{"0":{"v":"16","n":1}}},{"i":26,"$":{"0":{"v":"Integer","n":1}}},{"i":27,"$":{"0":{"v":"32","n":1}}},{"i":28,"$":{"0":{"v":"Long","n":1}}},{"i":29,"$":{"0":{"v":"64","n":1}}},{"i":30,"$":{"0":{"v":"These data types also have to be able to store negative values. So the first digit is used to store the sign.\\nSo for negative numbers the first digit is 1 and the rest of the digits are 0.\\nThe formula to convert a binary number to decimal is the same as positive numbers, but we calculate (-1) + [positive amount] because we don\'t need a negative zero.","n":0.123}}},{"i":31,"$":{"0":{"v":"Following this concept we have these ranges:","n":0.378}}},{"i":32,"$":{"0":{"v":"Datatype","n":1}}},{"i":33,"$":{"0":{"v":"Amount of bits","n":0.577}}},{"i":34,"$":{"0":{"v":"Range","n":1}}},{"i":35,"$":{"0":{"v":"Byte","n":1}}},{"i":36,"$":{"0":{"v":"8","n":1}}},{"i":37,"$":{"0":{"v":"-128 to 127","n":0.577}}},{"i":38,"$":{"0":{"v":"Short","n":1}}},{"i":39,"$":{"0":{"v":"16","n":1}}},{"i":40,"$":{"0":{"v":"-2^15 to 2^15-1","n":0.577}}},{"i":41,"$":{"0":{"v":"Integer","n":1}}},{"i":42,"$":{"0":{"v":"32","n":1}}},{"i":43,"$":{"0":{"v":"-2^31 to 2^31-1","n":0.577}}},{"i":44,"$":{"0":{"v":"Long","n":1}}},{"i":45,"$":{"0":{"v":"64","n":1}}},{"i":46,"$":{"0":{"v":"-2^63 to 2^63-1","n":0.577}}},{"i":47,"$":{"0":{"v":"Now that we know how to convert numbers to binary and back we can start to understand the different operators.","n":0.224}}},{"i":48,"$":{"0":{"v":"1.3.1 Bitwise and, or, xor","n":0.447}}},{"i":49,"$":{"0":{"v":"0b1010 & 0b0101  // 0b0000 Binary AND\\n0b1010 | 0b0101  // 0b1101 Binary OR\\n0b1010 ^ 0b0101  // 0b1011 Binary XOR\\n","n":0.229}}},{"i":50,"$":{"0":{"v":"If we just think about the bits as boolean values, we can use the AND, OR and XOR operators to manipulate the bits.\\nso bit 1 from the first number is ANDed with bit 1 from the second number, bit 2 from the first number is ANDed with bit 2 from the second number and so on.","n":0.134}}},{"i":51,"$":{"0":{"v":"1.3.2 Bitwise shift","n":0.577}}},{"i":52,"$":{"0":{"v":"0b1010 << 1  // 0b1010 Binary left shift\\n0b1010 >> 1  // 0b0101 Binary right shift\\n","n":0.258}}},{"i":53,"$":{"0":{"v":"Using lshift and rshift we can shift the bits of a number to the left or right by a certain amount.","n":0.218}}},{"i":54,"$":{"0":{"v":"1.4 Brackets & Priorities","n":0.5}}},{"i":55,"$":{"0":{"v":"1.4.0 Brackets","n":0.707}}},{"i":56,"$":{"0":{"v":"If you are working with bigger terms, there are priorities, e.g.\\nmultiplication and divisions are preferred before plus and minus.","n":0.229}}},{"i":57,"$":{"0":{"v":"If you want to prefer plus over multiply you can use brackets around\\nthe addition to give it a higher priority","n":0.224}}},{"i":58,"$":{"0":{"v":"eg.","n":1}}},{"i":59,"$":{"0":{"v":"4 * 10 + 3    // >> 43\\n4 * (10 + 3)  // >> 52\\n","n":0.258}}},{"i":60,"$":{"0":{"v":"1.4.1 Priorities","n":0.707}}},{"i":61,"$":{"0":{"v":"brackets (, )","n":0.577}}},{"i":62,"$":{"0":{"v":"bitwise and, or, xor &, |, ^","n":0.378}}},{"i":63,"$":{"0":{"v":"bitwise shift <<, >>","n":0.5}}},{"i":64,"$":{"0":{"v":"mathematical > power **","n":0.5}}},{"i":65,"$":{"0":{"v":"mathematical > mul, div, mod * / %","n":0.354}}},{"i":66,"$":{"0":{"v":"mathematical > add, sub + -","n":0.408}}},{"i":67,"$":{"0":{"v":"logical operators > and &&","n":0.447}}},{"i":68,"$":{"0":{"v":"logical operators > or ||","n":0.447}}},{"i":69,"$":{"0":{"v":"comparison","n":1}}},{"i":70,"$":{"0":{"v":">","n":1}}},{"i":71,"$":{"0":{"v":"<","n":1}}},{"i":72,"$":{"0":{"v":">=","n":1}}},{"i":73,"$":{"0":{"v":"<=","n":1}}},{"i":74,"$":{"0":{"v":"==","n":1}}},{"i":75,"$":{"0":{"v":"Home","n":1}}},{"i":76,"$":{"0":{"v":"Learn","n":1}}},{"i":77,"$":{"0":{"v":"Docs","n":1}}},{"i":78,"$":{"0":{"v":"\\n          Playground\\n        ","n":0.707}}},{"i":79,"$":{"0":{"v":"A modern object-orientated programming language ","n":0.447}}},{"i":80,"$":{"0":{"v":"Try Shake","n":0.707}}},{"i":81,"$":{"0":{"v":"println(\\"hello world\\");","n":0.707}}},{"i":82,"$":{"0":{"v":"Headline 1","n":0.707}}},{"i":83,"$":{"0":{"v":"Headline 2","n":0.707}}},{"i":84,"$":{"0":{"v":"Headline 3","n":0.707}}},{"i":85,"$":{"0":{"v":"Headline 4","n":0.707}}},{"i":86,"$":{"0":{"v":"Headline 5","n":0.707}}},{"i":87,"$":{"0":{"v":"Headline 6","n":0.707}}},{"i":88,"$":{"0":{"v":"var i = 0\\n","n":0.5}}}]}}')}}]);